// Code generated by go-enum
// DO NOT EDIT!

package document

import (
	"fmt"
)

const (
	// TypeKindUNDEFINED is a TypeKind of type UNDEFINED
	TypeKindUNDEFINED TypeKind = iota
	// TypeKindNON_NULL is a TypeKind of type NON_NULL
	TypeKindNON_NULL
	// TypeKindNAMED is a TypeKind of type NAMED
	TypeKindNAMED
	// TypeKindLIST is a TypeKind of type LIST
	TypeKindLIST
)

const _TypeKindName = "UNDEFINEDNON_NULLNAMEDLIST"

var _TypeKindMap = map[TypeKind]string{
	0: _TypeKindName[0:9],
	1: _TypeKindName[9:17],
	2: _TypeKindName[17:22],
	3: _TypeKindName[22:26],
}

// String implements the Stringer interface.
func (x TypeKind) String() string {
	if str, ok := _TypeKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TypeKind(%d)", x)
}

var _TypeKindValue = map[string]TypeKind{
	_TypeKindName[0:9]:   0,
	_TypeKindName[9:17]:  1,
	_TypeKindName[17:22]: 2,
	_TypeKindName[22:26]: 3,
}

// ParseTypeKind attempts to convert a string to a TypeKind
func ParseTypeKind(name string) (TypeKind, error) {
	if x, ok := _TypeKindValue[name]; ok {
		return x, nil
	}
	return TypeKind(0), fmt.Errorf("%s is not a valid TypeKind", name)
}
