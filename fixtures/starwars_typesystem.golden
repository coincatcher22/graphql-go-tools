schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

"The query type, represents all of the entry points into our object graph"
type Query @directiveOnObject {
	starship(id: ID!): Starship
	human(id: ID!): Human
	droid(id: ID!): Droid
	character(id: ID!): Character
	search(text: String): [SearchResult]
	reviews(episode: Episode!): [Review]
	hero(episode: Episode): Character @directiveOnField @directiveOnField2(with:"argument")
}

"The mutation type, represents all updates we can make to our data"
type Mutation {
	createReview(review: ReviewInput! episode: Episode): Review
}

"The subscription type, represents all subscriptions we can make to our data"
type Subscription {
	reviewAdded(episode: Episode): Review
}

"The episodes in the Star Wars trilogy"
enum Episode @directiveOnEnum {
	"Star Wars Episode VI: Return of the Jedi, released in 1983."
	JEDI
	"Star Wars Episode V: The Empire Strikes Back, released in 1980."
	EMPIRE
	"Star Wars Episode IV: A New Hope, released in 1977."
	NEWHOPE
}

"A character from the Star Wars universe"
interface Character @directiveOnInterface {
	"The movies this character appears in"
	appearsIn: [Episode]!
	"The friends of the character exposed as a connection with edges"
	friendsConnection(after: ID first: Int): FriendsConnection!
	"The friends of the character, or an empty list if they have none"
	friends: [Character]
	"The name of the character"
	name: String!
	"The ID of the character"
	id: ID!
}

"Units of height"
enum LengthUnit {
	"Primarily used in the United States"
	FOOT
	"The standard unit around the world"
	METER
}

"A humanoid creature from the Star Wars universe"
type Human {
	"A list of starships this person has piloted, or an empty list if none"
	starships: [Starship]
	"The movies this human appears in"
	appearsIn: [Episode]!
	"The friends of the human exposed as a connection with edges"
	friendsConnection(after: ID first: Int): FriendsConnection!
	"This human's friends, or an empty list if they have none"
	friends: [Character]
	"Mass in kilograms, or null if unknown"
	mass: Float
	"Height in the preferred unit, default is meters"
	height(unit: LengthUnit = METER): Float
	"The home planet of the human, or null if unknown"
	homePlanet: String
	"What this human calls themselves"
	name: String!
	"The ID of the human"
	id: ID!
}

"An autonomous mechanical character in the Star Wars universe"
type Droid {
	"This droid's primary function"
	primaryFunction: String
	"The movies this droid appears in"
	appearsIn: [Episode]!
	"The friends of the droid exposed as a connection with edges"
	friendsConnection(after: ID @directiveOnArgument first: Int): FriendsConnection!
	"This droid's friends, or an empty list if they have none"
	friends: [Character]
	"What others call this droid"
	name: String!
	"The ID of the droid"
	id: ID!
}

"A connection object for a character's friends"
type FriendsConnection {
	"Information for paginating this connection"
	pageInfo: PageInfo!
	"A list of the friends, as a convenience when edges are not needed."
	friends: [Character]
	"The edges for each of the character's friends."
	edges: [FriendsEdge]
	"The total number of friends"
	totalCount: Int
}

"An edge object for a character's friends"
type FriendsEdge {
	"The character represented by this friendship edge"
	node: Character
	"A cursor used for pagination"
	cursor: ID!
}

"Information for paginating this connection"
type PageInfo {
	hasNextPage: Boolean!
	endCursor: ID
	startCursor: ID
}

"Represents a review for a movie"
type Review {
	"Comment about the movie"
	commentary: String
	"The number of stars this review gave, 1-5"
	stars: Int!
	"The movie"
	episode: Episode
}

"The input object sent when someone is creating a new review"
input ReviewInput {
	"Favorite color, optional"
	favorite_color: ColorInput @directiveOnInputField
	"Comment about the movie, optional"
	commentary: String
	"0-5 stars"
	stars: Int!
}

"The input object sent when passing in a color"
input ColorInput {
	blue: Int!
	green: Int!
	red: Int!
}

type Starship {
	"Length of the starship, along the longest axis"
	length(unit: LengthUnit = METER @directiveOnArgument): Float
	"The name of the starship"
	name: String!
	"The ID of the starship"
	id: ID!
}

union SearchResult @directiveOnUnion = Human | Droid | Starship

"The 'Int' scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int @directiveOnScalar

"The 'Float' scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point)."
scalar Float

"The 'String' scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

"The 'Boolean' scalar type represents 'true' or 'false' ."
scalar Boolean

"The 'ID' scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as '4') or integer (such as 4) input value will be accepted as an ID."
scalar ID

"Directs the executor to include this field or fragment only when the argument is true."
directive @include (
	" Included when true."
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the argument is true."
directive @skip (
	"Skipped when true."
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks an element of a GraphQL schema as no longer supported."
directive @deprecated (
	"""
	Explains why this element was deprecated, usually also including a suggestion
    for how to access supported similar data. Formatted in
    [Markdown](https://daringfireball.net/projects/markdown/).
	"""
	reason: String
) on FIELD_DEFINITION | ENUM_VALUE

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
In some cases, you need to provide options to alter GraphQL's execution behavior
in ways field arguments will not suffice, such as conditionally including or
skipping a field. Directives provide this by describing additional information
to the executor.
"""
type __Directive {
	args: [__InputValue!]!
	locations: [__DirectiveLocation!]!
	description: String
	name: String!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a
__DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
	"Location adjacent to an input object field definition."
	INPUT_FIELD_DEFINITION
	"Location adjacent to an input object type definition."
	INPUT_OBJECT
	"Location adjacent to an enum value definition."
	ENUM_VALUE
	"Location adjacent to an enum definition."
	ENUM
	"Location adjacent to a union definition."
	UNION
	"Location adjacent to an interface definition."
	INTERFACE
	"Location adjacent to an argument definition."
	ARGUMENT_DEFINITION
	"Location adjacent to a field definition."
	FIELD_DEFINITION
	"Location adjacent to an object type definition."
	OBJECT
	"Location adjacent to a scalar definition."
	SCALAR
	"Location adjacent to a schema definition."
	SCHEMA
	"Location adjacent to an inline fragment."
	INLINE_FRAGMENT
	"Location adjacent to a fragment spread."
	FRAGMENT_SPREAD
	"Location adjacent to a fragment definition."
	FRAGMENT_DEFINITION
	"Location adjacent to a field."
	FIELD
	"Location adjacent to a subscription operation."
	SUBSCRIPTION
	"Location adjacent to a mutation operation."
	MUTATION
	"Location adjacent to a query operation."
	QUERY
}

"""
One possible value for a given Enum. Enum values are unique values, not a
placeholder for a string or numeric value. However an Enum value is returned in
a JSON response as a string.
"""
type __EnumValue {
	deprecationReason: String
	isDeprecated: Boolean!
	description: String
	name: String!
}

"""
Object and Interface types are described by a list of Fields, each of which has
a name, potentially a list of arguments, and a return type.
"""
type __Field {
	deprecationReason: String
	isDeprecated: Boolean!
	type: __Type!
	args: [__InputValue!]!
	description: String
	name: String!
}

"""
Arguments provided to Fields or Directives and the input fields of an
InputObject are represented as Input Values which describe their type and
optionally a default value.
"""
type __InputValue {
	"A GraphQL-formatted string representing the default value for this input value."
	defaultValue: String
	type: __Type!
	description: String
	name: String!
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all
available types and directives on the server, as well as the entry points for
query, mutation, and subscription operations.
"""
type __Schema {
	"A list of all directives supported by this server."
	directives: [__Directive!]!
	"If this server support subscription, the type that subscription operations will be rooted at."
	subscriptionType: __Type
	"If this server supports mutation, the type that mutation operations will be rooted at."
	mutationType: __Type
	"The type that query operations will be rooted at."
	queryType: __Type!
	"A list of all types supported by this server."
	types: [__Type!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of
types in GraphQL as represented by the '__TypeKind' enum.

Depending on the kind of a type, certain fields describe information about that
type. Scalar types provide no information beyond a name and description, while
Enum types provide their values. Object and Interface types provide the fields
they describe. Abstract types, Union and Interface, provide the Object types
possible at runtime. List and NonNull types compose other types.
"""
type __Type {
	ofType: __Type
	inputFields: [__InputValue!]
	enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
	possibleTypes: [__Type!]
	interfaces: [__Type!]
	fields(includeDeprecated: Boolean = false): [__Field!]
	description: String
	name: String
	kind: __TypeKind!
}

"An enum describing what kind of type a given '__Type' is."
enum __TypeKind {
	"Indicates this type is a non-null. 'ofType' is a valid field."
	NON_NULL
	"Indicates this type is a list. 'ofType' is a valid field."
	LIST
	"Indicates this type is an input object. 'inputFields' is a valid field."
	INPUT_OBJECT
	"Indicates this type is an enum. 'enumValues' is a valid field."
	ENUM
	"Indicates this type is a union. 'possibleTypes' is a valid field."
	UNION
	"Indicates this type is an interface. 'fields' ' and ' 'possibleTypes' are valid fields."
	INTERFACE
	"Indicates this type is an object. 'fields' and 'interfaces' are valid fields."
	OBJECT
	"Indicates this type is a scalar."
	SCALAR
}
