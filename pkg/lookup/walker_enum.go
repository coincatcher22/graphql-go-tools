// Code generated by go-enum
// DO NOT EDIT!

package lookup

import (
	"fmt"
)

const (
	// NONE is a NodeKind of type NONE
	NONE NodeKind = iota
	// OPERATION_DEFINITION is a NodeKind of type OPERATION_DEFINITION
	OPERATION_DEFINITION
	// DIRECTIVE is a NodeKind of type DIRECTIVE
	DIRECTIVE
	// DIRECTIVE_SET is a NodeKind of type DIRECTIVE_SET
	DIRECTIVE_SET
	// SELECTION_SET is a NodeKind of type SELECTION_SET
	SELECTION_SET
	// FIELD is a NodeKind of type FIELD
	FIELD
	// INLINE_FRAGMENT is a NodeKind of type INLINE_FRAGMENT
	INLINE_FRAGMENT
	// FRAGMENT_SPREAD is a NodeKind of type FRAGMENT_SPREAD
	FRAGMENT_SPREAD
	// FRAGMENT_DEFINITION is a NodeKind of type FRAGMENT_DEFINITION
	FRAGMENT_DEFINITION
	// ARGUMENT_SET is a NodeKind of type ARGUMENT_SET
	ARGUMENT_SET
	// ARGUMENT is a NodeKind of type ARGUMENT
	ARGUMENT
)

const _NodeKindName = "NONEOPERATION_DEFINITIONDIRECTIVEDIRECTIVE_SETSELECTION_SETFIELDINLINE_FRAGMENTFRAGMENT_SPREADFRAGMENT_DEFINITIONARGUMENT_SETARGUMENT"

var _NodeKindMap = map[NodeKind]string{
	0:  _NodeKindName[0:4],
	1:  _NodeKindName[4:24],
	2:  _NodeKindName[24:33],
	3:  _NodeKindName[33:46],
	4:  _NodeKindName[46:59],
	5:  _NodeKindName[59:64],
	6:  _NodeKindName[64:79],
	7:  _NodeKindName[79:94],
	8:  _NodeKindName[94:113],
	9:  _NodeKindName[113:125],
	10: _NodeKindName[125:133],
}

// String implements the Stringer interface.
func (x NodeKind) String() string {
	if str, ok := _NodeKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NodeKind(%d)", x)
}

var _NodeKindValue = map[string]NodeKind{
	_NodeKindName[0:4]:     0,
	_NodeKindName[4:24]:    1,
	_NodeKindName[24:33]:   2,
	_NodeKindName[33:46]:   3,
	_NodeKindName[46:59]:   4,
	_NodeKindName[59:64]:   5,
	_NodeKindName[64:79]:   6,
	_NodeKindName[79:94]:   7,
	_NodeKindName[94:113]:  8,
	_NodeKindName[113:125]: 9,
	_NodeKindName[125:133]: 10,
}

// ParseNodeKind attempts to convert a string to a NodeKind
func ParseNodeKind(name string) (NodeKind, error) {
	if x, ok := _NodeKindValue[name]; ok {
		return x, nil
	}
	return NodeKind(0), fmt.Errorf("%s is not a valid NodeKind", name)
}
