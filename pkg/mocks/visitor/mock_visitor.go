// Code generated by MockGen. DO NOT EDIT.
// Source: visitor.go

// Package mock_astvisitor is a generated GoMock package.
package mock_astvisitor

import (
	gomock "github.com/golang/mock/gomock"
	ast "github.com/jensneuse/graphql-go-tools/pkg/ast"
	reflect "reflect"
)

// MockVisitor is a mock of Visitor interface
type MockVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockVisitorMockRecorder
}

// MockVisitorMockRecorder is the mock recorder for MockVisitor
type MockVisitorMockRecorder struct {
	mock *MockVisitor
}

// NewMockVisitor creates a new mock instance
func NewMockVisitor(ctrl *gomock.Controller) *MockVisitor {
	mock := &MockVisitor{ctrl: ctrl}
	mock.recorder = &MockVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVisitor) EXPECT() *MockVisitorMockRecorder {
	return m.recorder
}

// Enter mocks base method
func (m *MockVisitor) Enter(kind ast.NodeKind, ref int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enter", kind, ref)
}

// Enter indicates an expected call of Enter
func (mr *MockVisitorMockRecorder) Enter(kind, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enter", reflect.TypeOf((*MockVisitor)(nil).Enter), kind, ref)
}

// Leave mocks base method
func (m *MockVisitor) Leave(kind ast.NodeKind, ref int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leave", kind, ref)
}

// Leave indicates an expected call of Leave
func (mr *MockVisitorMockRecorder) Leave(kind, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockVisitor)(nil).Leave), kind, ref)
}
