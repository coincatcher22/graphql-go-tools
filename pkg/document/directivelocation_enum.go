// Code generated by go-enum
// DO NOT EDIT!

package document

import (
	"fmt"
)

const (
	// DirectiveLocationQUERY is a DirectiveLocation of type QUERY
	DirectiveLocationQUERY DirectiveLocation = iota
	// DirectiveLocationMUTATION is a DirectiveLocation of type MUTATION
	DirectiveLocationMUTATION
	// DirectiveLocationSUBSCRIPTION is a DirectiveLocation of type SUBSCRIPTION
	DirectiveLocationSUBSCRIPTION
	// DirectiveLocationFIELD is a DirectiveLocation of type FIELD
	DirectiveLocationFIELD
	// DirectiveLocationFRAGMENT_DEFINITION is a DirectiveLocation of type FRAGMENT_DEFINITION
	DirectiveLocationFRAGMENT_DEFINITION
	// DirectiveLocationFRAGMENT_SPREAD is a DirectiveLocation of type FRAGMENT_SPREAD
	DirectiveLocationFRAGMENT_SPREAD
	// DirectiveLocationINLINE_FRAGMENT is a DirectiveLocation of type INLINE_FRAGMENT
	DirectiveLocationINLINE_FRAGMENT
	// DirectiveLocationSCHEMA is a DirectiveLocation of type SCHEMA
	DirectiveLocationSCHEMA
	// DirectiveLocationSCALAR is a DirectiveLocation of type SCALAR
	DirectiveLocationSCALAR
	// DirectiveLocationOBJECT is a DirectiveLocation of type OBJECT
	DirectiveLocationOBJECT
	// DirectiveLocationFIELD_DEFINITION is a DirectiveLocation of type FIELD_DEFINITION
	DirectiveLocationFIELD_DEFINITION
	// DirectiveLocationARGUMENT_DEFINITION is a DirectiveLocation of type ARGUMENT_DEFINITION
	DirectiveLocationARGUMENT_DEFINITION
	// DirectiveLocationINTERFACE is a DirectiveLocation of type INTERFACE
	DirectiveLocationINTERFACE
	// DirectiveLocationUNION is a DirectiveLocation of type UNION
	DirectiveLocationUNION
	// DirectiveLocationENUM is a DirectiveLocation of type ENUM
	DirectiveLocationENUM
	// DirectiveLocationENUM_VALUE is a DirectiveLocation of type ENUM_VALUE
	DirectiveLocationENUM_VALUE
	// DirectiveLocationINPUT_OBJECT is a DirectiveLocation of type INPUT_OBJECT
	DirectiveLocationINPUT_OBJECT
	// DirectiveLocationINPUT_FIELD_DEFINITION is a DirectiveLocation of type INPUT_FIELD_DEFINITION
	DirectiveLocationINPUT_FIELD_DEFINITION
)

const _DirectiveLocationName = "QUERYMUTATIONSUBSCRIPTIONFIELDFRAGMENT_DEFINITIONFRAGMENT_SPREADINLINE_FRAGMENTSCHEMASCALAROBJECTFIELD_DEFINITIONARGUMENT_DEFINITIONINTERFACEUNIONENUMENUM_VALUEINPUT_OBJECTINPUT_FIELD_DEFINITION"

var _DirectiveLocationMap = map[DirectiveLocation]string{
	0:  _DirectiveLocationName[0:5],
	1:  _DirectiveLocationName[5:13],
	2:  _DirectiveLocationName[13:25],
	3:  _DirectiveLocationName[25:30],
	4:  _DirectiveLocationName[30:49],
	5:  _DirectiveLocationName[49:64],
	6:  _DirectiveLocationName[64:79],
	7:  _DirectiveLocationName[79:85],
	8:  _DirectiveLocationName[85:91],
	9:  _DirectiveLocationName[91:97],
	10: _DirectiveLocationName[97:113],
	11: _DirectiveLocationName[113:132],
	12: _DirectiveLocationName[132:141],
	13: _DirectiveLocationName[141:146],
	14: _DirectiveLocationName[146:150],
	15: _DirectiveLocationName[150:160],
	16: _DirectiveLocationName[160:172],
	17: _DirectiveLocationName[172:194],
}

// String implements the Stringer interface.
func (x DirectiveLocation) String() string {
	if str, ok := _DirectiveLocationMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DirectiveLocation(%d)", x)
}

var _DirectiveLocationValue = map[string]DirectiveLocation{
	_DirectiveLocationName[0:5]:     0,
	_DirectiveLocationName[5:13]:    1,
	_DirectiveLocationName[13:25]:   2,
	_DirectiveLocationName[25:30]:   3,
	_DirectiveLocationName[30:49]:   4,
	_DirectiveLocationName[49:64]:   5,
	_DirectiveLocationName[64:79]:   6,
	_DirectiveLocationName[79:85]:   7,
	_DirectiveLocationName[85:91]:   8,
	_DirectiveLocationName[91:97]:   9,
	_DirectiveLocationName[97:113]:  10,
	_DirectiveLocationName[113:132]: 11,
	_DirectiveLocationName[132:141]: 12,
	_DirectiveLocationName[141:146]: 13,
	_DirectiveLocationName[146:150]: 14,
	_DirectiveLocationName[150:160]: 15,
	_DirectiveLocationName[160:172]: 16,
	_DirectiveLocationName[172:194]: 17,
}

// ParseDirectiveLocation attempts to convert a string to a DirectiveLocation
func ParseDirectiveLocation(name []byte) (DirectiveLocation, error) {
	if x, ok := _DirectiveLocationValue[string(name)]; ok {
		return x, nil
	}
	return DirectiveLocation(0), fmt.Errorf("%s is not a valid DirectiveLocation", name)
}
