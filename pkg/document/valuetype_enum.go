// Code generated by go-enum
// DO NOT EDIT!

package document

import (
	"fmt"
)

const (
	// ValueTypeDefaultNull is a ValueType of type DefaultNull
	ValueTypeDefaultNull ValueType = iota
	// ValueTypeVariable is a ValueType of type Variable
	ValueTypeVariable
	// ValueTypeInt is a ValueType of type Int
	ValueTypeInt
	// ValueTypeFloat is a ValueType of type Float
	ValueTypeFloat
	// ValueTypeString is a ValueType of type String
	ValueTypeString
	// ValueTypeBoolean is a ValueType of type Boolean
	ValueTypeBoolean
	// ValueTypeNull is a ValueType of type Null
	ValueTypeNull
	// ValueTypeEnum is a ValueType of type Enum
	ValueTypeEnum
	// ValueTypeList is a ValueType of type List
	ValueTypeList
	// ValueTypeObject is a ValueType of type Object
	ValueTypeObject
)

const _ValueTypeName = "DefaultNullVariableIntFloatStringBooleanNullEnumListObject"

var _ValueTypeMap = map[ValueType]string{
	0: _ValueTypeName[0:11],
	1: _ValueTypeName[11:19],
	2: _ValueTypeName[19:22],
	3: _ValueTypeName[22:27],
	4: _ValueTypeName[27:33],
	5: _ValueTypeName[33:40],
	6: _ValueTypeName[40:44],
	7: _ValueTypeName[44:48],
	8: _ValueTypeName[48:52],
	9: _ValueTypeName[52:58],
}

// String implements the Stringer interface.
func (x ValueType) String() string {
	if str, ok := _ValueTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ValueType(%d)", x)
}

var _ValueTypeValue = map[string]ValueType{
	_ValueTypeName[0:11]:  0,
	_ValueTypeName[11:19]: 1,
	_ValueTypeName[19:22]: 2,
	_ValueTypeName[22:27]: 3,
	_ValueTypeName[27:33]: 4,
	_ValueTypeName[33:40]: 5,
	_ValueTypeName[40:44]: 6,
	_ValueTypeName[44:48]: 7,
	_ValueTypeName[48:52]: 8,
	_ValueTypeName[52:58]: 9,
}

// ParseValueType attempts to convert a string to a ValueType
func ParseValueType(name string) (ValueType, error) {
	if x, ok := _ValueTypeValue[name]; ok {
		return x, nil
	}
	return ValueType(0), fmt.Errorf("%s is not a valid ValueType", name)
}
