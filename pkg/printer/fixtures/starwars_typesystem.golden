schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

"The query type, represents all of the entry points into our object graph"
type Query {
	hero(episode: Episode): Character
	reviews(episode: Episode!): [Review]
	search(text: String): [SearchResult]
	character(id: ID!): Character
	droid(id: ID!): Droid
	human(id: ID!): Human
	starship(id: ID!): Starship
}

"The mutation type, represents all updates we can make to our data"
type Mutation {
	createReview(episode: Episode review: ReviewInput!): Review
}

"The subscription type, represents all subscriptions we can make to our data"
type Subscription {
	reviewAdded(episode: Episode): Review
}

""
enum Episode {}

""
interface Character {}

""
enum LengthUnit {}

"A humanoid creature from the Star Wars universe"
type Human {
	id: ID!
	name: String!
	homePlanet: String
	height(unit: LengthUnit = METER): Float
	mass: Float
	friends: [Character]
	friendsConnection(first: Int after: ID): FriendsConnection!
	appearsIn: [Episode]!
	starships: [Starship]
}

"An autonomous mechanical character in the Star Wars universe"
type Droid {
	id: ID!
	name: String!
	friends: [Character]
	friendsConnection(first: Int after: ID): FriendsConnection!
	appearsIn: [Episode]!
	primaryFunction: String
}

"A connection object for a character's friends"
type FriendsConnection {
	totalCount: Int
	edges: [FriendsEdge]
	friends: [Character]
	pageInfo: PageInfo!
}

"An edge object for a character's friends"
type FriendsEdge {
	cursor: ID!
	node: Character
}

"Information for paginating this connection"
type PageInfo {
	startCursor: ID
	endCursor: ID
	hasNextPage: Boolean!
}

"Represents a review for a movie"
type Review {
	episode: Episode
	stars: Int!
	commentary: String
}

""
input ReviewInput {}

""
input ColorInput {}

""
type Starship {
	id: ID!
	name: String!
	length(unit: LengthUnit = METER): Float
}

""
union SearchResult = Human | Droid | Starship

""
scalar Int

""
scalar Float

""
scalar String

""
scalar Boolean

""
scalar ID

""
directive @include on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

""
directive @skip on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

""
directive @deprecated on FIELD_DEFINITION | ENUM_VALUE

"""

A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
In some cases, you need to provide options to alter GraphQL's execution behavior
in ways field arguments will not suffice, such as conditionally including or
skipping a field. Directives provide this by describing additional information
to the executor.

"""
type __Directive {
	name: String!
	description: String
	locations: [__DirectiveLocation!]!
	args: [__InputValue!]!
}

""
enum __DirectiveLocation {}

"""

One possible value for a given Enum. Enum values are unique values, not a
placeholder for a string or numeric value. However an Enum value is returned in
a JSON response as a string.

"""
type __EnumValue {
	name: String!
	description: String
	isDeprecated: Boolean!
	deprecationReason: String
}

"""

Object and Interface types are described by a list of Fields, each of which has
a name, potentially a list of arguments, and a return type.

"""
type __Field {
	name: String!
	description: String
	args: [__InputValue!]!
	type: __Type!
	isDeprecated: Boolean!
	deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an
InputObject are represented as Input Values which describe their type and
optionally a default value.

"""
type __InputValue {
	name: String!
	description: String
	type: __Type!
	defaultValue: String
}

"""

A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all
available types and directives on the server, as well as the entry points for
query, mutation, and subscription operations.

"""
type __Schema {
	types: [__Type!]!
	queryType: __Type!
	mutationType: __Type
	subscriptionType: __Type
	directives: [__Directive!]!
}

"""

The fundamental unit of any GraphQL Schema is the type. There are many kinds of
types in GraphQL as represented by the '__TypeKind' enum.

Depending on the kind of a type, certain fields describe information about that
type. Scalar types provide no information beyond a name and description, while
Enum types provide their values. Object and Interface types provide the fields
they describe. Abstract types, Union and Interface, provide the Object types
possible at runtime. List and NonNull types compose other types.

"""
type __Type {
	kind: __TypeKind!
	name: String
	description: String
	fields(includeDeprecated: Boolean = false): [__Field!]
	interfaces: [__Type!]
	possibleTypes: [__Type!]
	enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
	inputFields: [__InputValue!]
	ofType: __Type
}

""
enum __TypeKind {}